Q 1 . Create an HTML form that contain the Student Registration details and write a JavaScript to validate Student first and last name as it should not contain other than alphabets and age should be between 18 to 50. 

 

Program: 

<!DOCTYPE html> 

<html> 

<head> 

    <title>Student Registration</title> 

    <script>         function validateForm() {             // Get input values 

            var firstName = document.forms["registrationForm"]["firstName"].value;             var lastName = document.forms["registrationForm"]["lastName"].value;             var age = document.forms["registrationForm"]["age"].value; 

            // Regular expression to match only alphabets             var alphabetPattern = /^[A-Za-z]+$/;             // Check if first name contains only alphabets             if (!firstName.match(alphabetPattern)) {                 alert("First name should contain only alphabets."); 

                return false; 

            } 

            // Check if last name contains only alphabets             if (!lastName.match(alphabetPattern)) {                 alert("Last name should contain only alphabets."); 

                return false; 

            } 

            // Check if age is between 18 and 50             if (isNaN(age) || age < 18 || age > 50) {                 alert("Age should be between 18 and 50.");                 return false; 

            } 

            return true; 

        } 

    </script> 

</head> 

<body> 

    <h2>Student Registration</h2> 

    <form name="registrationForm" onsubmit="return validateForm()" method="post"> 

        <label for="firstName">First Name:</label> 

        <input type="text" id="firstName" name="firstName" required><br><br> 

        <label for="lastName">Last Name:</label> 

        <input type="text" id="lastName" name="lastName" required><br><br> 

        <label for="age">Age:</label> 

        <input type="number" id="age" name="age" required><br><br> 

        <input type="submit" value="Register"> 

    </form> 

</body> 

</html> 

 

Output: 

  

 

 

 

 

Q 2 . Create an HTML form that contain the Employee Registration details and write a 

JavaScript to validate DOB, Joining Date, and Salary 

 

Program: 

<!DOCTYPE html> 

<html> 

<head> 

    <title>Employee Registration</title> 

    <script> 

        function validateForm() {             // Get input values 

            var dob = document.forms["registrationForm"]["dob"].value;             var joiningDate = document.forms["registrationForm"]["joiningDate"].value;             var salary = document.forms["registrationForm"]["salary"].value; 

 

            // Regular expressions for date formats (YYYY-MM-DD)             var dateFormatPattern = /^\d{4}-\d{2}-\d{2}$/; 

 

            // Check DOB format 

            if (!dob.match(dateFormatPattern)) {                 alert("DOB should be in YYYY-MM-DD format.");                 return false; 

            } 

 

            // Check Joining Date format 

            if (!joiningDate.match(dateFormatPattern)) {                 alert("Joining Date should be in YYYY-MM-DD format.");                 return false; 

            } 

 

            // Check if DOB is before Joining Date             var dobDate = new Date(dob); 

            var joiningDateDate = new Date(joiningDate);             if (dobDate >= joiningDateDate) {                 alert("DOB should be before Joining Date.");                 return false; 

            } 

 

            // Check Salary is a valid number             if (isNaN(salary) || salary <= 0) { 

                alert("Salary should be a positive number.");                 return false; 

            } 

 

            return true; 

        } 

    </script> 

</head> 

<body> 

    <h2>Employee Registration</h2> 

    <form name="registrationForm" onsubmit="return validateForm()" method="post"> 

        <label for="dob">Date of Birth (YYYY-MM-DD):</label> 

        <input type="text" id="dob" name="dob" required><br><br> 

 

        <label for="joiningDate">Joining Date (YYYY-MM-DD):</label> 

        <input type="text" id="joiningDate" name="joiningDate" required><br><br> 

 

        <label for="salary">Salary:</label> 

        <input type="text" id="salary" name="salary" required><br><br> 

 

        <input type="submit" value="Register"> 

    </form> 

</body> </html> 

 

Output: 

  

 

 

 

 

 

 

 

 

Q.3 Create an HTML form for Login and write a JavaScript to validate email ID using Regular Expression. 

 

Program: 

<!DOCTYPE html> 

<html> 

<head> 

    <title>Login</title> 

    <script> 

        function validateEmail() {             // Get input value 

            var email = document.getElementById("email").value; 

            var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;             if (!email.match(emailPattern)) { 

                alert("Invalid email format. Please enter a valid email address.");                 return false; 

            } 

            return true; 

        } 

    </script> 

</head> 

<body> 

    <h2>Login</h2> 

    <form name="loginForm" onsubmit="return validateEmail()" method="post"> 

        <label for="email">Email:</label> 

        <input type="text" id="email" name="email" required><br><br> 

        <label for="password">Password:</label> 

        <input type="password" id="password" name="password" required><br><br>         <input type="submit" value="Login"> 

    </form> 

</body> </html> Output: 

  

 

Create a Node.js file that will convert the output "Hello World!" into upper-case letters. 

 

Program: 

// Import the built-in 'readline' module const readline = require('readline'); 

// Create a readline interface for reading user input const rl = readline.createInterface({   input: process.stdin,   output: process.stdout 

}); 

// Ask the user for input rl.question('Enter a string: ', (input) => {   // Convert the input to uppercase   const upperCaseString = input.toUpperCase();  

 // Display the uppercase string   console.log(`Uppercase: ${upperCaseString}`); 

  // Close the readline interface 

  rl.close(); 

}); 

 

Output: 

  

 

 

Using nodejs create a web page to read two file names from user and append contents of first file into second file 

 

Program: 

<!DOCTYPE html> 

<html lang="en"> 

<head> 

    <meta charset="UTF-8"> 

    <meta name="viewport" content="width=device-width, initial-scale=1.0">     <title>File Appender</title> 

</head> 

<body> 

    <h1>Append Contents of First File into Second File</h1> 

    <form action="/append" method="post"> 

        <label for="file1">Enter the name of the first file:</label> 

        <input type="text" id="file1" name="file1" required><br><br> 

        <label for="file2">Enter the name of the second file:</label> 

        <input type="text" id="file2" name="file2" required><br><br> 

        <input type="submit" value="Append"> 

    </form> 

</body> </html> 

 

Output: 

  

 	  

 

Create a Node.js file that opens the requested file and returns the content to the client. If anything goes wrong, throw a 404 error 

 

Program: 

const fs = require('fs'); const http = require('http'); const path = require('path'); const server = http.createServer((req, res) => {     const filePath = path.join(__dirname, req.url);     fs.access(filePath, fs.constants.F_OK, (err) => { 

        if (err) { 

            res.writeHead(404, { 'Content-Type': 'text/plain' });             res.end('404 Not Found'); 

        } else {             fs.readFile(filePath, 'utf8', (err, data) => { 

                if (err) { 

                    res.writeHead(500, { 'Content-Type': 'text/plain' });                     res.end('500 Internal Server Error');} 

else {res.writeHead(200, { 'Content-Type': 'text/plain' }); 

                    res.end(data); }});}});}); 

const port = process.env.PORT || 8882; server.listen(port, () => {     console.log(`Server is running on http://localhost:${port}`);}); Output: 

  

 

 

Q 7 Create a Node.js file that writes an HTML form, with an upload field  

 

Program: 

const http = require('http'); const fs = require('fs'); const path = require('path'); const formidable = require('formidable'); const server = http.createServer((req, res) => {   if (req.method === 'GET' && req.url === '/') {     const formHTML = ` 

      <!DOCTYPE html> 

      <html> 

      <head> 

        <title>File Upload Form</title> 

      </head> 

      <body> 

        <h1>File Upload</h1> 

        <form action="/upload" method="post" enctype="multipart/form-data"> 

          <input type="file" name="file"> 

          <input type="submit" value="Upload"> 

        </form>       </body>       </html>’;     res.writeHead(200, { 'Content-Type': 'text/html' });     res.end(formHTML); 

  } else if (req.method === 'POST' && req.url === '/upload') {     const form = new formidable.IncomingForm();     form.uploadDir = path.join(__dirname, 'uploads'); 

    form.parse(req, (err, fields, files) => {      if (err) {console.error(err);        res.writeHead(500, { 'Content-Type': 'text/plain' });         res.end('Internal Server Error');         return;} 

      const uploadedFile = files.file;       if (!uploadedFile) {         res.writeHead(400, { 'Content-Type': 'text/plain' });         res.end('No file uploaded.'); 

        return;} 

      const oldPath = uploadedFile.path;       const newPath = path.join(__dirname, 'uploads', uploadedFile.name);       fs.rename(oldPath, newPath, (err) => {         if (err) {console.error(err);           res.writeHead(500, { 'Content-Type': 'text/plain' });           res.end('Internal Server Error');           return;} 

        res.writeHead(200, { 'Content-Type': 'text/plain' });         res.end('File uploaded successfully.'); 

      });});} else {res.writeHead(404, { 'Content-Type': 'text/plain' });     res.end('Not Found');}}); server.listen(3000, () => {   console.log('Server is running on port 3000');}); 

 

Output: 

  

Q 12 Create a Simple Web Server using node js. 

 

Program: 

const http = require('http'); // Create an HTTP server const server = http.createServer((req, res) => { 

  // Set the response header with a 200 status code and content type   res.writeHead(200, { 'Content-Type': 'text/plain' }); 

  // Write the response body   res.end('Hello, World! Practical 12 \n'); 

}); 

// Listen on a specific port (e.g., 3000) and IP address (e.g., '127.0.0.1') const port = 8080; const hostname = '127.0.0.1'; server.listen(port, hostname, () => {   console.log(`Server is running at http://${hostname}:${port}/`); 

}); 

 

Output: 

  

 

Q 13 Using node js create a User Login System. 

 

Program: 

const http = require('http'); const url = require('url'); const querystring = require('querystring'); const bcrypt = require('bcrypt'); const users = []; const server = http.createServer((req, res) => {   const { pathname, query } = url.parse(req.url, true);   if (pathname === '/' && req.method === 'GET') {     res.writeHead(200, { 'Content-Type': 'text/html' });     res.end(` 

      <!DOCTYPE html> 

      <html lang="en"> 

      <head> 

        <meta charset="UTF-8"> 

        <title>Login</title> 

      </head> 

      <body> 

        <h1>Login</h1> 

        <form action="/login" method="POST"> 

          <label for="username">Username:</label> 

          <input type="text" id="username" name="username" required> 

          <br> 

          <label for="password">Password:</label> 

          <input type="password" id="password" name="password" required> 

          <br> 

          <button type="submit">Login</button> 

       </form> 

     </body> 

      </html> 

    `); 

  } else if (pathname === '/login' && req.method === 'POST') { 

    let body = '';     req.on('data', (chunk) => {       body += chunk.toString(); 

    }); 

    req.on('end', () => {       const { username, password } = querystring.parse(body);       const user = users.find((user) => user.username === username);       if (user && bcrypt.compareSync(password, user.password)) {         res.writeHead(200, { 'Content-Type': 'text/plain' });         res.end('Login successful!'); 

      } else { 

        res.writeHead(401, { 'Content-Type': 'text/plain' });         res.end('Invalid username or password'); 

      }});} else {res.writeHead(404, { 'Content-Type': 'text/plain' });     res.end('Not Found');}}); 

const PORT = process.env.PORT || 3003; 

server.listen(PORT, () => {   console.log(`Server is running on port ${PORT}`);}); 

 

Output: 

  

Q 14 Using node js create a eLearning System. 

 

Program 

const http = require('http'); const fs = require('fs'); const url = require('url'); const querystring = require('querystring'); const courses = [ 

    {name:"Web framework"}, 

    {name:"Machine Learning"}, 

    {name:"Big Data"},     {name:"Operating System"}]; const users = [{id: 1,username: "user1",password: "password1",},   {id: 2, username: "user2", password: "password2",},]; const server = http.createServer((req, res) => {   const parsedUrl = url.parse(req.url, true); 

  const pathname = parsedUrl.pathname;   if (req.method === 'GET') {     if (pathname === '/') {       const courseList = courses.map(course => `<li>${course.name}</li>`).join('');       const homepage = ` 

        <html> 

          <head> 

            <title>eLearning System</title> 

          </head> 

          <body> 

            <h1>Welcome to the eLearning System</h1> 

            <h2>Courses:</h2> 

            <ul> 

             ${courseList} 

           </ul> 

            <a href="/login">Login</a> 

          </body> 

        </html> 

      `; 

      res.writeHead(200, { 'Content-Type': 'text/html' });       res.end(homepage);     } else if (pathname === '/login') {       const loginForm = ` 

        <html> 

          <head> 

            <title>Login</title> 

          </head> 

          <body> 

            <h1>Login</h1> 

            <form action="/login" method="POST"> 

              <label for="username">Username:</label> 

              <input type="text" id="username" name="username" required> 

              <br> 

              <label for="password">Password:</label> 

              <input type="password" id="password" name="password" required> 

              <br> 

              <button type="submit">Login</button> 

            </form> 

          </body> 

        </html>  	  `;  	  res.writeHead(200, { 'Content-Type': 'text/html' });  	  res.end(loginForm); 

 	}} else if (req.method === 'POST') { if (pathname === '/login') { 

let body = '';   req.on('data', (chunk) => {      body += chunk.toString();});     req.on('end', () => {       const { username, password } = querystring.parse(body);         const user = users.find((user) => user.username === username);         if (user && user.password === password) { 

          res.writeHead(302, { 'Location': '/' });           res.end(); 

        } else {res.writeHead(401, { 'Content-Type': 'text/plain' });           res.end('Invalid username or password'); 

        }});}} else {res.writeHead(404, { 'Content-Type': 'text/plain' });     res.end('Not Found');}}); 

const PORT = process.env.PORT || 8082; server.listen(PORT, () => {   console.log(`Server is running on port ${PORT}`);}); 

 

 

Q 15 Using node js create a Recipe Book. 

 

Program: 

const express = require('express'); const app = express(); const port = 3040; app.use(express.urlencoded({ extended: true })); 

let recipes = []; app.get('/', (req, res) => {   let html = ` 

    <!DOCTYPE html> 

    <html lang="en"> 

    <head> 

        <meta charset="UTF-8"> 

        <meta name="viewport" content="width=device-width, initial-scale=1.0"> 

        <title>Recipe Book</title> 

    </head> 

    <body> 

        <h1>Recipe Book</h1> 

        <form action="/recipes" method="POST"> 

            <input type="text" name="title" placeholder="Recipe Title" required> 

            <input type="text" name="ingredients" placeholder="Ingredients" required> 

            <input type="text" name="instructions" placeholder="Instructions" required> 

            <button type="submit">Add Recipe</button> 

        </form> 

 	    <ul> 

 	        ${recipes.map(recipe => ` 

 	            <li> 

 	                <h2>${recipe.title}</h2> 

               <p>Ingredients: ${recipe.ingredients}</p> 

              <p>Instructions: ${recipe.instructions}</p> 

            </li> 

         `).join('')} 

      </ul> 

  </body> 

    </html> 

  `; 

  res.send(html); 

}); 

app.post('/recipes', (req, res) => {   const { title, ingredients, instructions } = req.body;   recipes.push({ title, ingredients, instructions });   res.redirect('/'); 

}); 

app.listen(port, () => {   console.log(`Server is running on port ${port}`); 

}); 

 

Output: 

   

Q 16 write node js script to interact with the filesystem, and serve a web page from a file 

 

Program :  	index.html 

<!DOCTYPE html> 

<html lang="en"> 

<head> 

    <meta charset="UTF-8"> 

    <meta name="viewport" content="width=device-width, initial-scale=1.0"> 

    <title>Simple Web Page</title> 

</head> 

<body> 

    <h1>Hello, World!</h1> 

    <p>This is a simple web page served by Node.js.</p> 

</body> 

</html> 

 

 	 	Javascript  

const http = require('http'); const fs = require('fs'); const path = require('path'); const server = http.createServer((req, res) => { 

  if (req.url === '/') {     const filePath = path.join(__dirname, 'index.html');     fs.readFile(filePath, 'utf8', (err, content) => { 

      if (err) { 

 	    res.writeHead(500, { 'Content-Type': 'text/plain' });  	    res.end('Internal Server Error'); 

 	  } else {  	    res.writeHead(200, { 'Content-Type': 'text/html' });  	   res.end(content); 

} 

}); 

} else {   res.writeHead(404, { 'Content-Type': 'text/plain' });   res.end('Not Found'); 

  } }); 

const port = 3010; 

server.listen(port, () => {   console.log(`Server is running on port ${port}`); 

}); 

 

Output 

  

 

 

 

 

 

 

 

 

 

Write node js script to build Your Own Node.js Module. Use require (‘http’) module is a built-in Node module that invokes the functionality of the HTTP library to create a local server. Also use the export statement to make functions in your module available externally. Create a new text file to contain the functions in your module called, “modules.js” and add this function to return today’s date and time. 

 

Program  	 module.js 

const getDateTime = () => {     const currentDate = new Date();     return currentDate.toUTCString(); 

  };   

  module.exports = { getDateTime }; 

   

 	 	Script.js 

 

const http = require('http'); const myModule = require('./modules'); http.createServer((req, res) => {   res.writeHead(200, { 'Content-Type': 'text/plain' });   res.write(`Current Date and Time: ${myModule.getDateTime()}`); 

  res.end(); }).listen(8071); console.log('Server is running at http://localhost:8071/'); 

 

Output: 

  

 

Create a js file named main.js for event-driven application. There should be a main loop that listens for events, and then triggers a callback function when one of those events is detected. 

 

Program: 

const EventEmitter = require('events'); // Creating an event emitter instance const eventEmitter = new EventEmitter(); // Event listener for custom event 'myEvent' eventEmitter.on('myEvent', () => {   console.log('My event has been triggered'); 

}); 

// Main loop that listens for events setInterval(() => { 

  // Simulating an event trigger   eventEmitter.emit('myEvent'); 

}, 2000); 

 

Output: 

  

 

 

 

 

Write node js application that transfer a file as an attachment on web and enables browser to prompt the user to download file using express js. 

 

Program 

const express = require('express'); const path = require('path'); const app = express(); const port = 3077; 

// Serve static files from the public directory app.use(express.static(path.join(__dirname, 'public'))); 

// Endpoint to trigger file download app.get('/download', (req, res) => {   const filePath = path.join(__dirname, 'public', 'example.TXT');   res.download(filePath, 'example.txt', (err) => { 

    if (err) { 

      console.error('Error downloading file: ', err);       res.status(500).send('Internal Server Error'); 

    } });}); 

app.listen(port, () => {   console.log(`Server is running on port ${port}`); 

}); 

 

Output: 

   

  

 Create your Django app in which after running the server, you should see on the browser, the text “Hello! I am learning Django”, which you defined in the index view. 

 

Progarm 

Views.py 

# myapp/views.py 

from django.http import HttpResponse def index(request):     return HttpResponse("Hello! I am learning Django....") 

 

Urls.py 

# myapp/urls.py from django.urls import path from . import views urlpatterns = [     path('', views.index, name='index'), 

] 

 

Urls.py 

# myproject/urls.py from django.contrib import admin from django.urls import include, path urlpatterns = [ 

    path('admin/', admin.site.urls), 

    path('', include('myapp.urls')), 

] 

 

Output: 

